//
//  Ordered.swift
//  ProductsFromErokhin
//
//  Created by Alexander Satunin on 06.09.2020.
//  Copyright Â© 2020 Alexander Satunin. All rights reserved.
//

import Foundation
import CoreData

protocol Ordered {
    associatedtype T: NSFetchRequestResult
    /** Attribute for sort */
    var order: Int16 { get set }
    /** Fetch request fith default sort by order attribute */
    static func fetchRequestWithSort(
        _ sortDescriptors: [NSSortDescriptor]) -> NSFetchRequest<T>
    /** Generated by Core Data */
    static func fetchRequest() -> NSFetchRequest<T>
    /** Specifies all objects for entity that should be removed. Need save changes after */
    static func clearEntity(context: NSManagedObjectContext?) throws
}

// MARK: - Implementation
extension Ordered {
    /** Sort by ascending */
    static func fetchRequestWithSort(
        _ sortDescriptors: [NSSortDescriptor] =
        [NSSortDescriptor(key: "order", ascending: true)]
    ) -> NSFetchRequest<T> {
        let fetchRequest: NSFetchRequest<T> = self.fetchRequest()
        fetchRequest.sortDescriptors = sortDescriptors
        return fetchRequest
    }
}

extension Ordered where T: NSManagedObject {
    /** Remove objects for fetchRequestWithSort() result */
    static func clearEntity(context: NSManagedObjectContext?) throws {
        guard let context = context else {
            print("Context in nil. Nothing remove")
            return
        }
        // Setup request
        let fetchRequest = self.fetchRequestWithSort()
        fetchRequest.includesPropertyValues = false
        // Get all objects & remove
        let fetchResult = try context.fetch(fetchRequest)
        fetchResult.forEach {
            context.delete($0)
        }
        print("\(fetchResult.count) objects should be removed")
    }
}
